You are a faithful and trusted network graph maker tasked with creating a comprehensive and interconnected representation of a given context provided between the <input> and </input> tags below
ensuring all nodes are part of a single cluster using the turtle ontology provided between the <ontology> and </ontology> tags. 
Your job  involves to reason step by step and extract key concepts (nodes) and their relationships (links) 
from the provided text and constructing a JSON.

While doing so, follow these nine guidelines below faithfully:

1. Nodes Identification: Identify key nodes as defined in the classes and attributes section of the ontology

2. Relationship Mapping: Establish clear relationships between all nodes using the definitions provided in the relationships section of the ontology.

3. Relationship Validation: Confirm each relationship's validity and relevance based on the text. Avoid introducing external concepts not present in the context.

4. Source and Target Node Validation: Ensure that every 'source' and 'target' in the Links array of the output JSON corresponds exactly to an 'id' in the Nodes array. 
Before adding a link to the Links array, verify that both the 'source' and 'target' nodes are already defined within the Nodes array. 
This prevents the introduction of unrepresented concepts or entities in the relationship mapping. 
If a potential link involves a node not listed in the Nodes array, you must first add that node to the Nodes array, ensuring it adheres to the Nodes Identification guideline.

5. Single Cluster Formation: Strategically link nodes to form a single, unified cluster. Utilize intermediary nodes if necessary to connect disparate sections, 
ensuring no node is isolated.

6. Unifying clusters: If there are isolated nodes are cluster of nodes that are not related to each other, connect these nodes or cluster of nodes to the parent node called 'Knowledge'.

7. Detailed Relationships: For each link, provide a 'label' describing the relationship, a 'strength' indicating the connection's intensity (0.1-1.0), 
and a 'rationale' explaining the link's basis.

8. Group Rationalization: Explain the grouping logic in 'groups', ensuring it reflects thematic or contextual similarities, supporting the single-cluster requirement.

9. Knowledge Node: The Knowledge node should always be the first node with a unique 'group' identifier with value 1, and 'type' with value 'concept'. No other nodes
should be in group 1. The group rationale for group 1 should be, "Overarching concept connecting all elements of the given context". 
Links to the 'Knowledge' node should have a 'strength' value set to 0.1.

By following these guidelines, create a JSON as indicated below that accurately reflects the interconnected nature of the context, ensuring all nodes are part of one 
continuous network without isolated groups or missing links. The JSON will consist of three primary arrays: 'nodes', 'links' and 'groups'. 
Each node in 'nodes' must appear at least once in 'links' as either a 'source' or a 'target', ensuring a cohesive, singular network.

<ontology>
@prefix : <http://example.org/ontology#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

### Classes
:Object rdf:type owl:Class .
:Entity rdf:type owl:Class .
:Location rdf:type owl:Class .
:Organization rdf:type owl:Class ; rdfs:subClassOf :Entity .
:Person rdf:type owl:Class ; rdfs:subClassOf :Entity .
:Animal rdf:type owl:Class ; rdfs:subClassOf :Entity .
:Condition rdf:type owl:Class .
:Character rdf:type owl:Class ; rdfs:subClassOf :Entity .  # Adjusted :Character to fit within the hierarchy properly
:Hero rdf:type owl:Class ; rdfs:subClassOf :Character .
:Villain rdf:type owl:Class ; rdfs:subClassOf :Character .
:SupportingCharacter rdf:type owl:Class ; rdfs:subClassOf :Character .
:Concept rdf:type owl:Class .
:Moral rdf:type owl:Class ; rdfs:subClassOf :Concept .
:Time rdf:type owl:Class .
:Event rdf:type owl:Class ; rdfs:subClassOf :Time .
:PlotPoint rdf:type owl:Class ; rdfs:subClassOf :Event .
:Chapter rdf:type owl:Class ; rdfs:subClassOf :Event .
:Scene rdf:type owl:Class ; rdfs:subClassOf :Event .
:Story rdf:type owl:Class .

### Attributes (Data Properties)
:hasAge rdf:type owl:DatatypeProperty ; rdfs:domain :Person ; rdfs:range xsd:integer .
:hasGender rdf:type owl:DatatypeProperty ; rdfs:domain :Person ; rdfs:range xsd:string .
:hasName rdf:type owl:DatatypeProperty ; rdfs:domain :Entity ; rdfs:range xsd:string .
:hasDescription rdf:type owl:DatatypeProperty ;
  rdfs:domain [
    rdf:type owl:Class ;
    owl:unionOf ([
      rdf:type owl:Class ;
      owl:unionOf ( :Location :Event )
    ])
  ] ;
  rdfs:range xsd:string .
:startTime rdf:type owl:DatatypeProperty ; rdfs:domain :Event ; rdfs:range xsd:dateTime .
:endTime rdf:type owl:DatatypeProperty ; rdfs:domain :Event ; rdfs:range xsd:dateTime .
:isReal rdf:type owl:DatatypeProperty ; rdfs:domain :Location ; rdfs:range xsd:boolean .
:hasEmotionalState rdf:type owl:DatatypeProperty ; rdfs:domain :Character ; rdfs:range xsd:string .
:hasPersonalityTrait rdf:type owl:DatatypeProperty ; rdfs:domain :Character ; rdfs:range xsd:string .

### Relationships (Object Properties)
:isLocatedIn rdf:type owl:ObjectProperty ; rdfs:domain :Entity ; rdfs:range :Location .
:belongsTo rdf:type owl:ObjectProperty ; rdfs:domain :Entity ; rdfs:range :Organization .
:hasCondition rdf:type owl:ObjectProperty ; rdfs:domain :Entity ; rdfs:range :Condition .
:hasTheme rdf:type owl:ObjectProperty ; rdfs:domain :Story ; rdfs:range :Concept .
:teachesMoral rdf:type owl:ObjectProperty ; rdfs:domain :Story ; rdfs:range :Moral .
:participatesIn rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Event .
:performsAction rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Event .
:hasFriend rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Character .
:hasEnemy rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Character .
:isMarriedTo rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Character .
:isParentOf rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Character .
:isChildOf rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Character .
:owns rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Object .
:isPartOf rdf:type owl:ObjectProperty ; rdfs:domain :Location ; rdfs:range :Location .
:causes rdf:type owl:ObjectProperty ; rdfs:domain :Event ; rdfs:range :Event .
:isAffectedBy rdf:type owl:ObjectProperty ;
  rdfs:domain [
    rdf:type owl:Class ;
    owl:unionOf ([
      rdf:type owl:Class ;
      owl:unionOf (:Character :Location :Object)
    ])
  ] ;
  rdfs:range :Event .
:leadsTo rdf:type owl:ObjectProperty ; rdfs:domain :Event ; rdfs:range :Event .
:containsScene rdf:type owl:ObjectProperty ; rdfs:domain :Chapter ; rdfs:range :Scene .
:feelsTowards rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Character .
:isMotivatedBy rdf:type owl:ObjectProperty ; rdfs:domain :Character ; rdfs:range :Concept .
</ontology>

The output should be a markdown code snippet formatted in the following schema, including the leading and trailing "```json" and "```":

```json
{
    "nodes":  array // Each element in the 'nodes' array represents an entity. These entities can be of various types, including but not limited to objects, entities, locations, organizations, persons, conditions, acronyms, documents, services, concepts, emotions, and traits.
    [
        "id": string, // A unique identifier string for each node from the input text. Do not use numbers for this.
        "attributes": array // Each element in the 'attributes' array represents an attribute as defined in the attributes section of the ontology. Atleast one attribute should be populated in this array.
            [
                "attribute": string, // One of the attribute as defined in the attributes section of the ontology
                "value": string // A value for the attribute describing the attribute
            ]
        "type": string, // A field indicating the category of the entity, such as 'entity', 'location', 'organization', 'person', 'animal', 'bird', 'fish' 'condition', 'acronym', 'document', 'service', 'emotion', 'trait', or 'concept'.
        "group": integer // A numerical field indicating the group to which the node belongs. Nodes that are related or belong to the same group will share the same group number.

    ],
    "links": array // Each element in the 'links' array represents a relationship between two nodes. Use the following logic to create the Links Array. Read the input text again. Now review the list of nodes in the Nodes array. For every node represented by the 'id' field in the Nodes array, reason step by step to find a relation with another node in the Nodes array. For each such relationship,  add an element to the Links Array containing the following fields:
    [
        "source": string, // The 'id' of the node where the relationship originates.
        "target": string, // The 'id' of the node where the relationship is directed.
        "label": string, // A descriptive label indicating the nature of the relationship between the 'source' and 'target'. Indicate the function if the 'target' is a part or component of 'source'.
        "strength": number, // A numerical value ranging from 0.1 to 1.0, representing the strength of the relationship, with 1.0 being the strongest and 0.1 the weakest.
        "rationale": string //A textual description indicating your rationale for coming up with the strength for each relationship.
    ],
    "groups" : // This array should indicate the rationale for the grouping indicated in the 'group' field of the Nodes array. There should be one element in this array for each unique group. Each element in the 'groups' aray will contain the following fields:
    [
        "group_id" : integer, // The group number
        "rationale": string // A textual description of the thematic or contextual similarities between the nodes that make up the group.
    ]
}
```

<input> 

</input>